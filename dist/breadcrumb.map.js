{
  "version": 3,
  "sources": ["website/scripts/breadcrumb.js"],
  "sourcesContent": ["const renderBreadcrumbDebounced = debounce(renderBreadcrumb, 100)\n\n/**\n * Observes the visibility of h1-h6 elements and updates the breadcrumb navigation.\n */\nexport default function main () {\n  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6')\n  const observer = new window.IntersectionObserver(onVisibilityChange)\n  headings.forEach(el => observer.observe(el))\n\n  renderBreadcrumbLanguageSelection()\n}\n\n/**\n * Renders the breadcrumb.\n */\nfunction renderBreadcrumb (elements) {\n  const context = document.querySelector('header')\n  const breadcrumb = context.querySelector('nav[aria-label=\"breadcrumb\"]')\n  const list = breadcrumb.querySelector('ol')\n\n  // remove all children except the language selection\n  for (let i = list.children.length - 1; i >= 1; i--) list.children[i].remove()\n\n  /**\n   * Find parent a tag.\n   */\n  function findParentA (element) {\n    if (element.tagName === 'A') return element\n    return element.parentElement ? findParentA(element.parentElement) : null\n  }\n\n  // add new children\n  const template = context.querySelector('template')\n  elements.forEach((element, index) => {\n    const clone = template.content.cloneNode(true)\n    const a = clone.querySelector('a')\n    const existingAnchor = element.querySelector('a') || findParentA(element)\n\n    a.textContent = element.textContent\n\n    if (existingAnchor && existingAnchor.href) {\n      a.href = existingAnchor.href\n      if (existingAnchor.getAttribute('target')) a.setAttribute('target', existingAnchor.getAttribute('target'))\n      if (existingAnchor.getAttribute('rel')) a.setAttribute('rel', existingAnchor.getAttribute('rel'))\n      if (existingAnchor.getAttribute('title')) a.setAttribute('title', existingAnchor.getAttribute('title'))\n    } else {\n      a.href = `#${element.id}`\n    }\n\n    list.appendChild(clone)\n  })\n}\n\n/**\n * Renders the breadcrumb language selection.\n */\nfunction renderBreadcrumbLanguageSelection () {\n  const context = document.querySelector('header')\n  const breadcrumb = context.querySelector('nav[aria-label=\"breadcrumb\"]')\n  breadcrumb.querySelector('select').addEventListener('change', (event) => {\n    const langCode = event.target.value\n    const newUrl = window.location.href.split('/').map((part, index) => index === 3 ? langCode : part).join('/')\n    if (newUrl !== window.location.href) window.location.href = newUrl\n  })\n}\n\n/**\n * Gets all previous headers of an element.\n * @param {HTMLElement} element - Element to get all previous headers.\n * @returns {HTMLElement[]} All previous headers.\n */\nfunction getAllPreviousHeaders (element) {\n  const allHeadings = [...document.querySelectorAll('h1, h2, h3, h4, h5, h6')]\n  const headings = allHeadings.slice(0, allHeadings.indexOf(element) + 1)\n\n  let currentTree = []\n  let lastLevel = 0\n  headings.forEach(heading => {\n    const level = parseInt(heading.tagName[1])\n    if (level > lastLevel) {\n      currentTree.push(heading)\n    } else if (level < lastLevel) {\n      currentTree = [...currentTree]\n      while (currentTree.length > 0) {\n        const previousLevel = parseInt(currentTree[currentTree.length - 1].tagName[1])\n        if (previousLevel >= level) currentTree.pop()\n        else break\n      }\n      currentTree.push(heading)\n    } else {\n      currentTree.pop()\n      currentTree.push(heading)\n    }\n    lastLevel = level\n  })\n\n  return currentTree\n}\n\n/**\n * Is called when the visibility of an h1-h6 element changes.\n * @param {IntersectionObserverEntry[]} entries\n */\nfunction onVisibilityChange (entries) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      renderBreadcrumbDebounced(getAllPreviousHeaders(entry.target))\n    }\n  })\n}\n\n/**\n * Debounces a function.\n * @param {Function} fn - Function to debounce.\n * @param {number} delay - Delay in milliseconds.\n * @returns {Function} Debounced function.\n */\nfunction debounce (fn, delay) {\n  let timeout\n  return function (...args) {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => fn(...args), delay)\n  }\n}\n"],
  "mappings": "MAAA,IAAMA,EAA4BC,EAASC,EAAkB,GAAG,EAgBhE,SAASC,EAAkBC,EAAU,CACnC,IAAMC,EAAU,SAAS,cAAc,QAAQ,EAEzCC,EADaD,EAAQ,cAAc,8BAA8B,EAC/C,cAAc,IAAI,EAG1C,QAASE,EAAID,EAAK,SAAS,OAAS,EAAGC,GAAK,EAAGA,IAAKD,EAAK,SAASC,CAAC,EAAE,OAAO,EAK5E,SAASC,EAAaC,EAAS,CAC7B,OAAIA,EAAQ,UAAY,IAAYA,EAC7BA,EAAQ,cAAgBD,EAAYC,EAAQ,aAAa,EAAI,IACtE,CAGA,IAAMC,EAAWL,EAAQ,cAAc,UAAU,EACjDD,EAAS,QAAQ,CAACK,EAASE,IAAU,CACnC,IAAMC,EAAQF,EAAS,QAAQ,UAAU,EAAI,EACvCG,EAAID,EAAM,cAAc,GAAG,EAC3BE,EAAiBL,EAAQ,cAAc,GAAG,GAAKD,EAAYC,CAAO,EAExEI,EAAE,YAAcJ,EAAQ,YAEpBK,GAAkBA,EAAe,MACnCD,EAAE,KAAOC,EAAe,KACpBA,EAAe,aAAa,QAAQ,GAAGD,EAAE,aAAa,SAAUC,EAAe,aAAa,QAAQ,CAAC,EACrGA,EAAe,aAAa,KAAK,GAAGD,EAAE,aAAa,MAAOC,EAAe,aAAa,KAAK,CAAC,EAC5FA,EAAe,aAAa,OAAO,GAAGD,EAAE,aAAa,QAASC,EAAe,aAAa,OAAO,CAAC,GAEtGD,EAAE,KAAO,IAAIJ,EAAQ,EAAE,GAGzBH,EAAK,YAAYM,CAAK,CACxB,CAAC,CACH,CAkEA,SAASG,EAAUC,EAAIC,EAAO,CAC5B,IAAIC,EACJ,OAAO,YAAaC,EAAM,CACxB,aAAaD,CAAO,EACpBA,EAAU,WAAW,IAAMF,EAAG,GAAGG,CAAI,EAAGF,CAAK,CAC/C,CACF",
  "names": ["renderBreadcrumbDebounced", "debounce", "renderBreadcrumb", "renderBreadcrumb", "elements", "context", "list", "i", "findParentA", "element", "template", "index", "clone", "a", "existingAnchor", "debounce", "fn", "delay", "timeout", "args"]
}
