import { minify } from 'html-minifier-terser'

const minifyTrueDefault = {
  caseSensitive: false,
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: false,
  continueOnParseError: true,
  customAttrAssign: [],
  customAttrCollapse: null,
  customAttrSurround: [],
  customEventAttributes: [],
  decodeEntities: true,
  html5: true,
  ignoreCustomComments: [],
  ignoreCustomFragments: [],
  includeAutoGeneratedTags: false,
  keepClosingSlash: true,
  maxLineLength: null,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  noNewlinesBeforeTagClose: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  processScripts: [],
  quoteCharacter: '"',
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: false,
  removeEmptyElements: false,
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: false,
  removeStyleLinkTypeAttributes: false,
  removeTagWhitespace: false,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: true,
}

/**
 * Finish rendering the page.
 * @param {import('node-html-parser').HTMLElement} root - The root element.
 * @param {object} page - The page to render.
 * @param {object} config - The configuration.
 * @param {object} api - The API.
 * @returns {Promise<string>} The rendered page.
 */
export default async function renderEnd (root, page, config, api) {
  if (config?.html?.minify) {
    const minifyOptions = { ...((typeof config.html?.minify === 'object' && config.html?.minify) || minifyTrueDefault) }
    if (typeof config.css?.minify !== 'undefined') minifyOptions.minifyCSS = !!config.css?.minify
    if (typeof config.js?.minify !== 'undefined') minifyOptions.minifyJS = !!config.js?.minify
    return await minify(root.toString(), minifyOptions)
  } else {
    return root.toString()
  }
}
