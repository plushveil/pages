import * as crypto from 'node:crypto'

import { minify } from 'html-minifier-terser'
import { parse } from 'node-html-parser'

const minifyTrueDefault = {
  caseSensitive: false,
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: true,
  conservativeCollapse: false,
  continueOnParseError: true,
  customAttrAssign: [],
  customAttrCollapse: null,
  customAttrSurround: [],
  customEventAttributes: [],
  decodeEntities: true,
  html5: true,
  ignoreCustomComments: [],
  ignoreCustomFragments: [],
  includeAutoGeneratedTags: false,
  keepClosingSlash: true,
  maxLineLength: null,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: true,
  noNewlinesBeforeTagClose: true,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  processScripts: [],
  quoteCharacter: '"',
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: false,
  removeEmptyElements: false,
  removeOptionalTags: false,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: false,
  removeStyleLinkTypeAttributes: false,
  removeTagWhitespace: false,
  sortAttributes: true,
  sortClassName: true,
  trimCustomFragments: true,
  useShortDoctype: true,
}

/**
 * Finish rendering the page.
 * @param {string} root - The root page.
 * @param {object} page - The page to render.
 * @param {object} config - The configuration.
 * @param {object} api - The API.
 * @returns {Promise<string>} The rendered page.
 */
export default async function renderEnd (root, page, config, api) {
  if (config?.js?.integrity) {
    root = parse(root)
    const csp = root.querySelector('meta[http-equiv="Content-Security-Policy"]')
    if (csp) {
      if (!csp.getAttribute('content').includes('script-src')) {
        csp.setAttribute('content', `${csp.getAttribute('content')}; script-src 'sha384'`)
      } else {
        csp.setAttribute('content', csp.getAttribute('content').replace(/script-src /, `script-src 'sha384'`))
      }
    }

    const scripts = root.querySelectorAll('script:not([src])')
    for (const script of scripts) {
      const content = script.innerText
      const hash = crypto.createHash('sha384').update(content).digest('base64')
      csp.setAttribute('content', `${csp.getAttribute('content').replace('script-src \'sha384\'', `script-src 'sha384' 'sha384-${hash}' `)}`)
      script.setAttribute('integrity', `sha384-${hash}`)
    }
    csp.setAttribute('content', csp.getAttribute('content').replace(/script-src 'sha384'/, 'script-src'))
    root = root.toString()
  }

  if (config?.html?.minify) {
    const minifyOptions = { ...((typeof config.html?.minify === 'object' && config.html?.minify) || minifyTrueDefault) }
    if (typeof config.css?.minify !== 'undefined') minifyOptions.minifyCSS = !!config.css?.minify
    if (typeof config.js?.minify !== 'undefined') minifyOptions.minifyJS = !!config.js?.minify
    return await minify(root, minifyOptions)
  }

  return root
}
